Intro
==========
It is a fully feature client and server-side routing
library for react.

Helps create and navigate between different URLs that
make up your web application.

Provides unique URLs for differnt components in the app 
and make the UI easily shareable with other users.

Installation
===============
To install react router 6 for this application 
npm install react-router-dom@6

Configuring routes with react router
=====================================
1) connect the URL in the browser with the react application.
   For that, react router provide a component called browserRouter
   with which we need to wrap our entire app.

  This will allow us to use all the features from react 
  router within the app component tree.

Routes --> Within this component, we define the individual 
           route using the Route component 

          On Route component, we specify two props :-
          1) path -> which reflect the path in the URL.
          2) element -> what is the element need to be render when the URL matches the path.



Link
-> Routing to different routes using an element in the UI.
-> To navigate to another route, react router provides 
   us with the link component
-> Link element renders an anchor element in the DOM. But instead of href
   attribute, we pass 'to' as props and specify the path for the configured route.

Active Links
=============
By default the link which we are rendering using Link component will look same
irrespective of which route we are currently viewing.

In practical web application, it is common to style the link corresponding to the 
active route in a different way. It also improves the User experience.

React Router provides another component called NavLink which knows whether or not it 
is active link. 

We can use that component to style the active link in navbar.

This NavLink component by default it receives an active class when the link is 
the current route.

Why Link component instead of NavLink component??

NavLink component specifically meant for building components like
navbar or breadcrumbs or set of tabs where we would like to highlight the 
current selected item and provide useful context with screen readers.


If we want to navigate to routes from other parts of the app, Link should
be the component to use as we wouldn't want the active class being applied when 
it is not needed.

Navigating Programatically
Sometimes, we might need to programatically navigate to a particular route.
To navigate programatically, react router provides 'useNavigate' hook.


Configuring No Match Route 

We need to inform user if route path is not exist in the application.
The user might assume that the app is still loading or there is an error in the 
slash user route.

It would be better to inform user that the url does not match any route in our 
application.

We will create a component that will be render for url that don't match any
of the configured routes.

path = "*" has special meaning in react router.
It means this route will match only when no other routes do.


Nested Routes 

React router also helps to switch between a portion
of the view inside the page.

To acheive this, we use nested routes.

steps
====
1. Configure a new route to the products page and 
   add a link in the nav bar.

2. Add another set of navigation links within the products component.

3. Creates components that need to be render for this nested routes 
   and also configured the new routes (Nested routes).


The special about nested routes is react router automatically
forms the full path to the children routes.

So the path will /products/featured and /products/new 

Thus, now we have configured routes to render the child 
components within the parent component.

However, the product page still doesn't know where to render 
the child component.
For that react router provides an outlet component.

The outlet component renders the component corresponding 
to the matching child routes from parent list of routes.

One of the common usecases is to have a common layout
for a feature in our application.


Index Route 
============
In case of nested routes, child routes renders only 
when the url is /product/featured.

But when the url is /product, we might still want to display
the list of featured products.

That can be achieved using an index route in react router.

Index routes is also going to be nested routes.

But in case of index routes instead of passing path props
we will specify 'index' props.
This index props will now share the path of the parent 
route which is products.

So when we have nested routes and we want a route to be rendered at the 
parent url , make use of index route.
Index route will contain the index props instead of the path props. 
The path will be the same as parent route.

Dynamic Routes 
==========
id will match with any value as long as the pattern is same.
meaning id will be any string, not just a number.


Admin page will be render when url matches with /users/admin.
React router first match the routes which are more specific.

React router first try to find the matching routes and onlyif that is not 
found then it will match with dynamic routes.

Dynamic routes can be nested as well.


URL params
===
In typical applications, we need to extract the user id and do something with that id.


Search params
URL params is not the only way to add parameters 
to a route.
we can also add optional query string

E.g. users/?filter=active

These parameters are called Search params in react router.

Using Search params is common when we have to apply filters in a 
listing page.

Relative Links 
==============
Relative link is a link that doesn't start with '/' slash
and will inherit the closest route in which they are rendered.


Lazy loading
=============
Lazy loading is a technique where components 
not required on the home page can be split into 
separate code bundles and downloaded only when the 
user navigates to that page.

We can think of it as incrementally downloading
the application.

It helps reduce initial load time thereby improving 
performance.

Here, we will learn how to lazy load the about page.

To Lazy load a route, we need to use dynamic imports
and react suspense.

Step-1 
Comment out the import statement of about page 
and instead use dynamic import syntax.

For Dynamic import, we need default import of a component.


Step-2 
Include the lazy component as part of the route 
configuration

Step-3
Wrap the LazyAbout component with react suspense.
fallback props which can be any react element.

This is how we can optimize the initial load time
with react router, react suspense and dynamic import.